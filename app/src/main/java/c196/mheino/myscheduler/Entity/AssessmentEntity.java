package c196.mheino.myscheduler.Entity;

import androidx.room.Entity;
import androidx.room.ForeignKey;
import androidx.room.Ignore;
import androidx.room.PrimaryKey;

import static androidx.room.ForeignKey.CASCADE;

/** This class will model data for the assessment. This class will be used to
 *  model the data that will compose the database table that will hld data
 *  about the assessment. The primary key will be autogenerated by the
 *  database.
 *
 * @author  Matthew Heino
 *
 */

@Entity(tableName = "assessment_table", foreignKeys = @ForeignKey(entity=CourseEntity.class
        ,parentColumns = "courseId", childColumns = "assessmentCourseId", onDelete = CASCADE))
public class AssessmentEntity {


    @PrimaryKey(autoGenerate = true)
    private int assessmentId;

    // Foreign key from the Course Entity
    private int assessmentCourseId;
    private String assessmentName;
    private String assessmentStartDate;
    private String assessmentEndDate;
    private String assessmentType;

    /** The Room constructor for the Assessment.  This constructor will be used to
     *  for the object for the data that is returned from the database.  The
     *  ID has been omitted since this wil be be created by the database. Note:
     *  A setter for the ID has been created below. (Will be used for the Room)
     *
     * @param assessmentName
     * @param assessmentEndDate
     * @param assessmentType
     * @param assessmentCourseId
     */
    public AssessmentEntity(String assessmentName,  String assessmentStartDate, String assessmentEndDate,
                            String assessmentType, int assessmentCourseId)
    {
        this.assessmentName = assessmentName;
        this.assessmentStartDate = assessmentStartDate;
        this.assessmentEndDate = assessmentEndDate;
        this.assessmentType = assessmentType;
        this.assessmentCourseId = assessmentCourseId;
    }

    /**Construct that will be used to test the app without using a Room
     *  database. This method is used to to test the different views without
     *  the use of a Room database.  This method includes the Assessment ID
     *  that was omitted in the constructor for the Room version of the
     *  constructor. Used for testing.
     *
     * @param assessmentId
     * @param assessmentName
     * @param assessmentDate
     * @param assessmentType
     * @param assessmentCourseId
     */
    @Ignore
    public AssessmentEntity(int assessmentId, String assessmentName,
                            String assessmentDate, String assessmentType,
                            int assessmentCourseId)
    {
        this.assessmentId = assessmentId;
        this.assessmentName = assessmentName;
        this.assessmentEndDate = assessmentDate;
        this.assessmentType = assessmentType;
        this.assessmentCourseId = assessmentCourseId;
    }
    
    /** Method to get the assessment Id.
     *
     * @return
     */
    public int getAssessmentId() {
        return assessmentId;
    }

    /** Method to set the assessment ID.  This method is required to use the
     *  auto generate ID feature of the SQLite database.
     *
     * @param assessmentId
     */
    public void setAssessmentId(int assessmentId) {
        this.assessmentId = assessmentId;
    }

    /** Method to get the assessment name.
     *
     * @return
     */
    public String getAssessmentName() {
        return assessmentName;
    }

    /** Method to set the assessment name.  This method is required to use the
     *  auto generate ID feature of the SQLite database.
     *
     * @param assessmentName
     */
    public void setAssessmentName(String assessmentName) {
        this.assessmentName = assessmentName;
    }

    /** Get the Assessment Start Date
     *
     * @return
     */
    public String getAssessmentStartDate() {
        return assessmentStartDate;
    }

    /** Set the AssessmentStartDate
     *
     * @param assessmentStartDate
     */
    public void setAssessmentStartDate(String assessmentStartDate) {
        this.assessmentStartDate = assessmentStartDate;
    }

    /** Method to get the assessment end date.
     *
     * @return
     */
    public String getAssessmentEndDate() {
        return assessmentEndDate;
    }

    /** Method to set the assessment date.  This method is required to use the
     *  auto generate ID feature of the SQLite database.
     *
     * @param assessmentDate
     */
    public void setAssessmentDate(String assessmentDate) {
        this.assessmentEndDate = assessmentDate;
    }

    public String getAssessmentType() {
        return assessmentType;
    }

    /** Method to set the assessment type.  .
     *
     * @param assessmentType
     */
    public void setAssessmentType(String assessmentType) {
        this.assessmentType = assessmentType;
    }

    public int getAssessmentCourseId() {
        return assessmentCourseId;
    }

    /** Method to set the assessment course ID.  This method will set the
     *  course ID that will be associated with the assessment.  This will be
     *  used to help filter the assessment based on each course's ID.
     *
     * @param assessmentCourseId
     *
     */
    public void setAssessmentCourseId(int assessmentCourseId) {
        this.assessmentCourseId = assessmentCourseId;
    }

    /** The toString method that will have formatted output for the
     *  information contained in the class.
     *
     * @return
     *
     */
    @Override
    public String toString() {
        return "AssessmentEntity{" +
                "assessmentId=" + assessmentId +
                ", assessmentName='" + assessmentName + '\'' +
                ", assessmentStartDate=" + assessmentStartDate +
                ", assessmentEndDate='" + assessmentEndDate + '\'' +
                ", assessmentType='" + assessmentType + '\'' +
                ", assessmentCourseId=" + assessmentCourseId +
                '}';
    }

} // end class
