package c196.mheino.myscheduler.Entity;

import androidx.room.Entity;
import androidx.room.ForeignKey;
import androidx.room.Ignore;
import androidx.room.PrimaryKey;
import static androidx.room.ForeignKey.CASCADE;

/** This class will model data for the courses. This class will be used to
 *  model the data that will compose the database table that will hold data
 *  about the course. The primary key will be autogenerated by the
 *  database.
 *
 * @author  Matthew Heino
 *
 */
@Entity(tableName = "course_table", foreignKeys = @ForeignKey(entity=TermEntity.class
        , parentColumns = "termID",childColumns = "termId", onDelete = CASCADE))
public class CourseEntity {

    @PrimaryKey(autoGenerate = true)
    private int courseId;

    private String courseTitle;
    private String startDate;
    private String endDate;
    private String status;
    private int courseInstructorID;
    private int termId;

    // Used in the ROOM.

    /** The Room constructor for the Course.  This constructor will be used to
     *  for the object for the data that is returned from the database.  The
     *  ID has been omitted since this wil be be created by the database. Note:
     *  A setter for the ID has been created below. (Will be used for the Room)
     *
     * @param courseTitle
     * @param startDate
     * @param endDate
     * @param status
     * @param courseInstructorID
     * @param termId
     */
    public CourseEntity(String courseTitle, String startDate, String endDate, String status, int courseInstructorID
            ,int termId) {
        this.courseTitle = courseTitle;
        this.startDate = startDate;
        this.endDate = endDate;
        this.status = status;
        this.courseInstructorID = courseInstructorID;
        this.termId = termId;
    }

    /**Construct that will be used to test the app without using a Room
     *  database. This method is used to to test the different views without
     *  the use of a Room database.  This method includes the Course ID that was
     *  omitted in the constructor for the Room version of the constructor.
     *  Used for testing
     *
     * @param courseId
     * @param courseTitle
     * @param startDate
     * @param endDate
     * @param status
     * @param courseInstructorID
     * @param termId
     */
    @Ignore
    public CourseEntity(int courseId, String courseTitle, String startDate, String endDate, String status
            , int courseInstructorID, int termId) {
        this.courseId = courseId;
        this.courseTitle = courseTitle;
        this.startDate = startDate;
        this.endDate = endDate;
        this.status = status;
        this.courseInstructorID = courseInstructorID;
        this.termId = termId;
    }

    //  Setters and Getters.===================================================
    /** Get the course ID. This method will return the integer that corresponds
     *  to the id of the Course
     *
     * @return
     */
    public int getCourseId() {
        return courseId;
    }

    /** Method to set the Id of the course.  This method will take an integer
     *  as a parameter that will be used to set the ID of the course.
     *
     * @param courseId
     */
    public void setCourseId(int courseId) {
        this.courseId = courseId;
    }

    /** Method to return the course title
     *
     * @return
     */
    public String getCourseTitle() {
        return courseTitle;
    }

    /** Method to set the course title.
     *
     * @param courseTitle
     */
    public void setCourseTitle(String courseTitle) {
        this.courseTitle = courseTitle;
    }

    /** Method to get the start date of the course
     *
     * @return
     */
    public String getStartDate() {
        return startDate;
    }

    /** Method to set the course start date
     *
     * @param startDate
     */
    public void setStartDate(String startDate) {
        this.startDate = startDate;
    }

    /** Method to get the end date of the course.
     *
     * @return
     */
    public String getEndDate() {
        return endDate;
    }

    /** Method to set the end date of the course.
     *
     * @param endDate
     */
    public void setEndDate(String endDate) {
        this.endDate = endDate;
    }

    /** Method to get the status of the course.
     *
     * @return
     */
    public String getStatus() {
        return status;
    }

    /** Method to set the status of the course.
     *
     * @param status
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /** Method to get the course instructor.
     *
     * @return
     */
    public int getCourseInstructorID() {
        return courseInstructorID;
    }

    /** Method to set the course Instructor.
     *
     * @param courseInstructorID
     */
    public void setCourseInstructorID(int courseInstructorID) {
        this.courseInstructorID = courseInstructorID;
    }

    /** Method to get the term ID that is associated with the course
     *
     * @return
     */
    public int getTermId() {
        return termId;
    }

    /** Method to set the term ID that is associated with the course.
     *
     * @param termId
     */
    public void setTermId(int termId) {
        this.termId = termId;
    }


    /** The toString method that will have formatted output for the
     *  information contained in the class.
     *
     * @return
     *
     */
    @Override
    public String toString() {
        return this.courseTitle;

    }

} // end class
